package "FlyCloudC/scheme"

import(
  "FlyCloudC/scheme/symbol"
  "FlyCloudC/scheme/tokenizer"
  "moonbitlang/core/hashmap"
)

// Values
fn compile(CoreForm) -> Inst

fn parse(String) -> Array[Value] raise ParseException

fn[Self : ToSexp] to_sexp(Self) -> Value

// Types and methods
pub struct Closure {
  env : Environment
  parm_names : FixedArray[@symbol.Symbol]
  body : Inst
  name : @symbol.Symbol?
}
impl Show for Closure

pub enum CoreForm {
  SelfEval(Value)
  Var(@symbol.Symbol)
  Quote(Value)
  Lambda(FixedArray[@symbol.Symbol], CoreForm, name~ : @symbol.Symbol?)
  Begin(FixedArray[CoreForm], CoreForm)
  If(CoreForm, CoreForm, CoreForm?)
  Apply(CoreForm, FixedArray[CoreForm])
  Set(@symbol.Symbol, CoreForm)
  Define(@symbol.Symbol, CoreForm)
}
fn CoreForm::compile(Self) -> Inst
impl FromSexp for CoreForm
impl ToSexp for CoreForm
impl Show for CoreForm

pub(all) struct Environment {
  binds : @hashmap.T[@symbol.Symbol, Value]
  next : Environment?
  closure : Closure?
}
fn Environment::add_all_base_primitive(Self) -> Unit
fn Environment::add_number_primitive(Self) -> Unit
fn Environment::add_other_primitive(Self) -> Unit
fn Environment::add_pair_primitive(Self) -> Unit
fn Environment::add_string_primitive(Self) -> Unit
fn Environment::add_vector_primitive(Self) -> Unit
fn Environment::base() -> Self
fn Environment::define_var(Self, @symbol.Symbol, Value) -> Unit
fn Environment::extend(Self, FixedArray[@symbol.Symbol], FixedArray[Value], Closure) -> Self
fn Environment::lookup(Self, @symbol.Symbol) -> Value raise SchemeException
fn Environment::set_var(Self, @symbol.Symbol, Value) -> Unit raise SchemeException
impl Show for Environment

pub struct Frame {
  ret : Inst
  env : Environment
  rib : FixedArray[Value]
  stack : Frame?
}

pub(all) suberror FromSexpError Value
impl Show for FromSexpError

pub enum Inst {
  Const(Value, Inst)
  Refer(@symbol.Symbol, Inst)
  Return
  Close(FixedArray[@symbol.Symbol], Inst, @symbol.Symbol?, Inst)
  Branch(Inst, Inst)
  Save(Inst, Inst)
  Args(Int, Inst)
  Push(Int, Inst)
  Apply
  Set(@symbol.Symbol, Inst)
  Define(@symbol.Symbol, Inst)
}

pub suberror ParseException {
  UnexpectedToken(@tokenizer.Token)
  MoreThanOneAfterDot(@tokenizer.Token)
  MisTokenAfterDot
  UnexpectedEndOfInput
  ReadException(@tokenizer.ReadException)
}
impl Show for ParseException

pub(all) enum Primitive {
  Normal(name~ : @symbol.Symbol, (FixedArray[Value]) -> Value raise SchemeException)
  CallCC
  Apply
}
fn Primitive::name(Self) -> @symbol.Symbol
impl Show for Primitive

pub(all) suberror SchemeException {
  UndefineVar
  CallNonProcedure
  ArgumentCount
  TypeError(Int)
  InvalidArgument(Int)
  DevideZero
}
impl Show for SchemeException

pub(all) struct VM {
  mut acc : Value
  mut next : Inst
  mut env : Environment
  mut rib : FixedArray[Value]
  mut stack : Frame?
}
fn VM::new(inst~ : Inst = .., env~ : Environment = ..) -> Self
fn VM::run_one_step(Self) -> Unit raise SchemeException
fn VM::run_to_halt(Self) -> Unit raise SchemeException

pub(all) enum Value {
  Nil
  True
  False
  Pair(Value, Value)
  Int(Int)
  Double(Double)
  Symbol(@symbol.Symbol)
  String(String)
  Vector(FixedArray[Value])
  Primitive(Primitive)
  Closure(Closure)
  Continuation(Frame?)
}
fn Value::bool(Bool) -> Self
fn Value::eq(Self, Self) -> Bool
fn Value::list(FixedArray[Self]) -> Self
fn Value::list_tail_and_length(Self) -> (Self, Int)
fn Value::symbol(String) -> Self
fn Value::to_core_form(Self) -> CoreForm raise FromSexpError
fn Value::unsafe_to_fixedarray(Self, Int) -> FixedArray[Self]
impl ToSexp for Value
impl Default for Value
impl Show for Value

// Type aliases

// Traits
pub(open) trait FromSexp {
  from_sexp(Value) -> Self raise FromSexpError
}
impl FromSexp for Json

pub(open) trait ToSexp {
  to_sexp(Self) -> Value
}
impl ToSexp for Bool
impl ToSexp for Int
impl ToSexp for Double
impl ToSexp for String
impl[A : ToSexp] ToSexp for FixedArray[A]
impl ToSexp for @symbol.Symbol
impl[A : ToSexp] ToSexp for Array[A]
impl[A : ToSexp, B : ToSexp] ToSexp for Iter2[A, B]
impl ToSexp for Json
impl[A : ToSexp, B : ToSexp] ToSexp for (A, B)

